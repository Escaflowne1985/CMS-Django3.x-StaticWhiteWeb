"""
Django settings for NewsManage project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import datetime

# 项目应用构建路径
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# 项目密钥
SECRET_KEY = 'pn$qev#j9%(&2r7m(x2+e*y^25gp4+rnwe4n4-h7y!j(=v2igi'

# 项目调试开关
DEBUG = True

ALLOWED_HOSTS = ['*']

# 设置站点信息，部署服务器需要更新
API_URL = 'http://127.0.0.1:8000'
# API_URL = 'https://cms_api.datayang.cn'
WEB_URL = 'http://127.0.0.1'
# WEB_URL = 'https://cms.datayang.cn'

# 应用配置目录
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'xadmin',  # xadmin主体
    'reversion',  # 用于数据回滚
    'crispy_forms',  # 展示表单
    'DjangoUeditor',  # 富文本编辑器
    'rest_framework.authtoken',  # 用户Token
    'django_filters',  # 过滤器
    'rest_framework',  # 前后端分离框架
    'rest_framework_swagger',
    'corsheaders',  # 跨域问题
    'django_extensions',  # 缓存处理

    'apps.Configuration',  # 总配置应用
    'apps.User',  # 用户应用
    'apps.Article',  # 文章应用
    'apps.StatisticalData',  # 网站统计数据
]

# 中间件配置目录
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.StatisticalData.middleware.ApiLoggingMiddleware',  # 统计数据自定义的中间件
]

# 继承用户模型使用指定应用中的model名称
AUTH_USER_MODEL = 'User.UserProfile'
# 指定默认的路由url文件
ROOT_URLCONF = 'NewsManage.urls'
# 模板目录文件
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 将media_url上传文件路径注册到模板中
            ],
            'libraries': {  # static 就不需要每个页面都使用 {% load static %}加载
                'staticfiles': 'django.templatetags.static',
            }
        },
    },
]

# wsgi应用配置文件
WSGI_APPLICATION = 'NewsManage.wsgi.application'

# 数据库设置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'cms_system_data.sqlite3'),
    }
}

# # 数据库配置选项（MySQL）
# DATABASES = {
#     'default': {
#         'NAME': 'ContentManagementSystem',  # 数据库名
#         'ENGINE': 'django.db.backends.mysql',
#         'USER': 'root',  # 用户名
#         'PASSWORD': 'Admin!23456',  # 密码
#         'HOST': 'localhost',  # 主机IP
#         'PORT': '3306',  # 端口
#         'useSSL': 'false',
#         'OPTIONS': {
#             "init_command": "SET foreign_key_checks = 0;",
#         }
#     }
# }

# 密码验证功能列表
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 时间设置
LANGUAGE_CODE = 'zh-hans'  # 语言环境
TIME_ZONE = 'Asia/Shanghai'  # 时区选择
USE_I18N = True  # 国际化的首字母缩写（“ i” + 18个字母+“ n”；小写的i用于将其与数字1（一个）区分开）。
USE_L10N = True  # 首字母缩写为“本地化”（“ L” + 10个字母+“ n”；大写L用于将其与数字1（一个）区分开）。
USE_TZ = False  # 默认是True, 时间是UTC时间，由于我们要用到本地时间，所以设置成False

# 静态文件目录（CSS、JavaScript、Images等）
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # 部署服务器解决Admin后台CSS样式消失，执行python3 manage.py collectstatic

# 多媒体文件目录（上传文件、图片等）
MEDIA_URL = '/media/'
MEDIAFILES_DIRS = (os.path.join(BASE_DIR, 'media'),)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# rest framework 配置选项
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',            # IsAuthenticated 仅通过认证的用户
        # 'rest_framework.permissions.AllowAny',                   # AllowAny 允许所有用户
        # 'rest_framework.permissions.IsAdminUser',                # IsAdminUser 仅管理员用户
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # 在 DRF中配置JWT认证
        'rest_framework.authentication.BasicAuthentication',  # 在 DRF中基础认证信息，特定认证修改使用
        # 'rest_framework.authentication.TokenAuthentication',  # 全局Token认证
        # 'rest_framework.authentication.SessionAuthentication',  # 全局Session认证
        # 'article.auth.MyTokenAuthentication',  # 自定义的带过期的认证
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 新版drf schema_class默认用的是rest_framework.schemas.openapi.AutoSchema
}

# 配置jwt载荷中的有效期设置
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),  # 设置Token有效期
    'JWT_AUTH_HEADER_PREFIX': 'DataYang',  # token前缀：headers中 Authorization 值的前缀
    'JWT_ALLOW_REFRESH': True,  # 刷新token：允许使用旧的token换新token
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(hours=24),  # token有效期：token在24小时内过期, 可续期token
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'User.utils.jwt_response_payload_handler',  # 5.自定义JWT载荷信息：自定义返回格式，需要手工创建
}

# 解决跨域问题配置
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (API_URL,)
# CORS_ORIGIN_WHITELIST = (WEB_URL,) # 部署到服务器上进行替换

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

# # 缓存服务功能
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',  # 指定缓存使用的引擎
#         'LOCATION': os.path.join(BASE_DIR, 'caches'),  # 指定缓存的路径
#         'TIMEOUT': 300,  # 缓存超时时间(默认为300秒,None表示永不过期)
#         'OPTIONS': {
#             'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）
#             'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）
#         }
#     }
# }
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
    # 缓存存储
    'DEFAULT_USE_CACHE': 'default',
}

# 服务器日志功能
LOG_DIR = BASE_DIR + "/manage_log"
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s FuncName:%(funcName)s LINE:%(lineno)d [%(levelname)s]- %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(funcName)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'info.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 2,
            'formatter': 'standard',
        },
        'default_debug': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'debug.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 2,
            'formatter': 'standard',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'common.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 2,
            'formatter': 'standard',
        },
        'restful_api': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'api.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 2,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'default_debug'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'common': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': True
        },
        'api': {
            'handlers': ['restful_api'],
            'level': 'INFO',
            'propagate': True
        },
    }
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 100240  # 同时最多处理的文件数

# SECURITY安全设置 - 支持http时建议开启
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = True  # 将所有非SSL请求永久重定向到SSL
SESSION_COOKIE_SECURE = True  # 仅通过https传输cookie
CSRF_COOKIE_SECURE = True  # 仅通过https传输cookie
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 严格要求使用https协议传输
SECURE_HSTS_PRELOAD = True  # HSTS为
SECURE_HSTS_SECONDS = 60
SECURE_CONTENT_TYPE_NOSNIFF = True  # 防止浏览器猜测资产的内容类型
